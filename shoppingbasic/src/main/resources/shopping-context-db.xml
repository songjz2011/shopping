<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd"
    >
    
    <!--
		spring事物管理
	-->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">  
        <property name="sessionFactory" ref="sessionFactory" />  
    </bean>
    
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <property name ="packagesToScan">
            <list>
				<value>shopping.**.model</value>
			</list>
		</property>
        <property name="hibernateProperties">  
            <props>  
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">true</prop>  
                <prop key="hibernate.format_sql">false</prop>
                <!-- 数据库批量查询最大数 -->
                <prop key="hibernate.jdbc.fetch_size">50</prop>
                <!-- 数据库批量更新、添加、删除操作最大数 -->
                <prop key="hibernate.jdbc.batch_size">25</prop>  
                <!-- 是否开启二级缓存 -->
                <prop key="hibernate.cache.use_second_level_cache">false</prop>
                <!-- 指定hibernate在何时释放JDBC连接 -->
                <prop key="hibernate.connection.release_mode">auto</prop>
                
                <prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>  
        </property>  
    </bean>
    
    <beans profile="dev">
        <!-- 定义 开发环境 -->
		<context:property-placeholder ignore-unresolvable="true" location="classpath:shopping-db.properties"/>
		<!-- 
			C3P0是一个开放源代码的JDBC数据源实现项目
			C3P0提供了close()方法关闭数据源，所以必须设定destroy-method=”close”属性， 以便Spring容器关闭时，数据源能够正常关闭。
			acquireRetryAttempts：定义在从数据库获取新连接失败后重复尝试获取的次数，默认为30； 
		    acquireRetryDelay：两次连接中间隔时间，单位毫秒，默认为1000； 
		    autoCommitOnClose：连接关闭时默认将所有未提交的操作回滚。默认为false； 
		    automaticTestTable： C3P0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数，那么属性preferredTestQuery将被忽略。你 不能在这张Test表上进行任何操作，它将中为C3P0测试所用，默认为null； 
		    breakAfterAcquireFailure：获取连接失败将会引起所有等待获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调   用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认为 false； 
		    checkoutTimeout：当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒，默认为0； 
		    connectionTesterClassName： 通过实现ConnectionTester或QueryConnectionTester的类来测试连接，类名需设置为全限定名。默认为 com.mchange.v2.C3P0.impl.DefaultConnectionTester； 
		    idleConnectionTestPeriod：隔多少秒检查所有连接池中的空闲连接，默认为0表示不检查； 
		    initialPoolSize：初始化时创建的连接数，应在minPoolSize与maxPoolSize之间取值。默认为3； 
		    maxIdleTime：最大空闲时间，超过空闲时间的连接将被丢弃。为0或负数则永不丢弃。默认为0； 
		    maxPoolSize：连接池中保留的最大连接数。默认为15； 
		    maxStatements：JDBC的标准参数，用以控制数据源内加载的PreparedStatement数量。但由于预缓存的Statement属 于单个Connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素，如果maxStatements与 maxStatementsPerConnection均为0，则缓存被关闭。默认为0； 
		    maxStatementsPerConnection：连接池内单个连接所拥有的最大缓存Statement数。默认为0； 
		    numHelperThreads：C3P0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能，通过多线程实现多个操作同时被执行。默认为3； 
		    preferredTestQuery：定义所有连接测试都执行的测试语句。在使用连接测试的情况下这个参数能显著提高测试速度。测试的表必须在初始数据源的时候就存在。默认为null； 
		    propertyCycle： 用户修改系统配置参数执行前最多等待的秒数。默认为300； 
		    testConnectionOnCheckout：因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的时候都 将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
									等方法来提升连接测试的性能。默认为false； 
		    testConnectionOnCheckin：如果设为true那么在取得连接的同时将校验连接的有效性。默认为false
		-->
		<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"   
	    	destroy-method="close">   
			<property name="driverClass" value="${jdbc.driver}" />
			<property name="jdbcUrl" value="${jdbc.url}" />
			<property name="user" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			
			<!-- Connection Pooling Info -->
			<property name="minPoolSize"><value>5</value></property>
			<property name="maxPoolSize"><value>3000</value></property>
			<!--最大空闲时间,30分钟内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
			<property name="maxIdleTime"><value>1800</value></property>
			<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
			<property name="acquireIncrement"><value>5</value></property>
			<!--用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
				属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
				如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
			<property name="maxStatements"><value>0</value></property>
			<!--初始化时获取10个连接，取值应在minPoolSize与maxPoolSize之间。Default: 10 -->
			<property name="initialPoolSize"><value>10</value></property>
			<!--每30分钟检查所有连接池中的空闲连接。Default: 0 -->
			<property name="idleConnectionTestPeriod"><value>1800</value></property>
			<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 --> 
			<property name="acquireRetryAttempts"><value>30</value></property>
			<!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出
				SQLException,如设为0则无限期等待。单位毫秒。Default: 0 --> 
			<property name="checkoutTimeout"><value>30000</value></property> 
			<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
				保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
				获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->
			<property name="breakAfterAcquireFailure"><value>false</value></property>
			<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
				时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
				等方法来提升连接测试的性能。Default: false -->
			<property name="testConnectionOnCheckout"><value>false</value></property>
	           <!--默认为false，如果此参数设置为true，当所有连接用完的时候，会以堆栈信息显示哪些代码使用
	           	了连接。由于跟踪连接状态会产生额外的消耗，如果程序稳定，应该将此参数恢复为默认值false。-->
			<property name="debugUnreturnedConnectionStackTraces"><value>false</value></property>
	    </bean>
        
    </beans>

</beans>